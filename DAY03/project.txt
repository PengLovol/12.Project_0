项目练习

项目的注意事项和开发流程
项目工具的介绍和推荐

电子词典项目
httpserver + framework 第三版

pip的使用
pdb调试
httpserver模块



什么是项目 ： 有一定的完整性功能的代码集合

软件项目开发流程

需求分析 --》 概要设计 --》项目规划 --》 详细设计 
                                     --》 编码测试 
--》 项目功能测试 --》 调试完善 --》 项目发布 
--》后期维护

需求分析 ： 确定用户的真实项目需求

1. 确定用户的真实需求，项目的基本功能
2. 确定项目的整体难度和可行性分析
3. 需求分析文档，用户确认

概要设计 ： 对项目整体进行分析，确定初步的技术方向

1. 确定整体架构
2. 确定功能模块
3. 规划使用技术，对技术可行性分析
4. 编写项目的开发流程图和概要设计文档

项目规划: 确定项目开发时限，时间节点，重要里程碑

1. 确定开发的先后顺序
2. 确定时间轴和里程碑
3. 人员的分工合作
4. 形成甘特图和思维导图

详细设计和项目编码

1. 写代码，包括数据库 网络环境等
2. 技术攻关
3. 完成详细设计文档
   思路，技术说明，代码说明，数据结构说明，环境约束等等
4. 代码的自我检测

项目测试

1. 完成项目测试
2. 编写测试报告
3. 项目完善

项目发布
1. 项目部署提交给有用户使用
2. 完成项目说明文档

后期维护升级
1. 项目的维护
2. 项目升级

注意事项
1. 按时完成项目是首要工作
2. 有规划实施会事半功倍
3. 及时解决项目冲突
4. 切忌追求完美，先完成基本功能再完善

项目工具推荐

编写文档 ： word  ppt   excel  markdown  LaTex
项目流程图 ： Mindmanage  Xmind   Visio
项目管理： project
代码管理： git  svn
编译工具： pycharm  vim  Webstream  eclipse  vscode

电子词典

功能说明：
1. 用户可以登录和注册
   登录凭借用户名密码即可
   注册要求用户必须填写用户名和密码其他内容自定
   用户名要求不能够重复

2. 用户数据要求使用数据库长期保存
   数据报自定

3. 能够满足多个用户同时登陆操作的需求

4. 功能分为客户单和服务端，客户单主要发起请求，服务    端处理请求，用户启动客户端即进入一级界面
     登陆   注册   退出
5. 用户登录后即进入二级界面
     查单词   查看历史记录   退出
         单词本 ： 每行一个单词
	           单词和解释之间一定有空格
		   后面的单词一定比前面的大

     查单词 ： 输入单词，显示单词意思，可以循环查询。输入 ## 表示退出查词

     查看历史记录： 查看当前用户的历史查词记录
        name     word    time
      
     退出 ： 退出到一级界面，相当于注销


1. 确定技术点
   什么并发，什么套接字  什么数据库？  
   文件处理还是数据库查询？ 
   如果是数据库查询如何将单词存入数据库
   

2. 建立数据表
   建立几个表  每个表结构  表关系
	
   3     用户信息     历史记录        存单词  
   
         注册         查询历史记录    查单词
	 登录         查单词
         

3. 项目分析 仿照ftp和聊天室进行项目分析

4. 搭建通信框架

5. 分析有几个功能，如何封装，每个功能具体实现什么内    容

复习

git 分支操作
git 远程操作
github 使用

项目基础
   项目开发流程
   项目的注意事项

电子词典



项目分析

服务器 ： 登录  注册   查词   历史记录

客户端 ： 打印界面   发出请求    接收反馈   打印结果

技术点 :   并发   sys.fork
           套接字  tcp 套接字
	   数据库  mysql
	   查词    文本

工作流程： 创建数据库，存储数据 ---》 搭建通信框架，            建立并发关系---》实现具体功能封装

1. 创建数据库存储数据
   dict

   user ： id  name   passwd
   hist :  id  name   word   time
   words : id  word   interpret

   create database dict default charset=utf8;

   create table user (id int primary key auto_increment,name varchar(32) not null,passwd varchar(16) default '000000');

   create table hist(id int auto_increment primary key,name varchar(32) not null,word varchar(32) not null,time varchar(64));
   
   create table words (id int auto_increment primary key,word varchar(32) not null,interpret text not null);

2. 搭建基本框架
   
   服务器  创建套接字 ---》 创建父子进程 --》 子进程         等待处理客户单端请求--》父进程继续接收下         一个客户端连接

   客户端  创建套接字 --》发起连接请求 --》一级界面         --》请求（登录，注册，退出）--》登录成功         进入二级界面--》请求（查词，历史记录）

3. 功能实现
   注册   
      客户端
         1. 输入注册信息
	 2. 将注册信息发送给服务器
	 3. 得到服务器反馈

      服务端
         1. 接收请求
	 2. 判断是否允许注册
	 3. 将结果反馈给客户端
	 4. 注册信息插入数据库

cookie

 import  getpass
 
 passwd = getpass.getpass()
 功能 ： 隐藏密码输入


作业 ： 1. 电子词典项目 再过一下流程
        2. 复习httpserver 第二版
	3. 将电子词典上传到github

复习：

电子词典开发流程
   1. 根据需求设计框架
   2. 指定工作流程
   3. 完成技术点总结和设计
   4. 完成数据库设计
   5. 搭建通信框架
   6. 完成具体功能设计
   7. 编码实现
   

PIP的使用

作用 ： 管理python的标准第三方库中第三方软件包

安装： sudo apt-get install python3-pip

常用命令：

    安装软件： pip3  install  [package]

      e.g.   sudo  pip3 install  ssh

    查看当前python软件包 ： pip3 list

    搜索某个名字的python包：pip3 search  [name]

    查看软件包信息：pip3  show  [package]
    
    升级软件包： pip3 install --upgrade [package]

    卸载软件包： sudo pip3  uninstall  [package]  
               e.g.  sudo pip3 uninstall ssh
    
    导出软件包环境：pip3 freeze > requirements.txt
    
    根据文档自动安装:pip3 install -r requirements.txt


PDB调试方法

import  pdb 

功能 ： 断点设置，单步执行， 查看代码，查看函数，追踪变量等
    
命令：
  b  break     设置断点
  c  continue   继续执行
  n  next     单步执行
  s  step     单步执行，可以进入函数内部
  l  list     查看代码段
  pp          查看某个变量值
  help        帮助
  exit        退出pdb调试

进入pdb调试模式： pdb.set_trace() 
 
直接进入PDB调试模式运行 ： python3 -m pdb debug.py 


httpserver

前台   前端   客户单   用户端

功能 ： 提供给用户直接使用

要求 ： 良好的用户体验
       更全面的交互功能
	   很好的和后端进行数据交互
       有良好的夸平台性
	   有一定的优化

后台   后端   服务端

功能 ： 逻辑处理
       算法实现
	   磁盘交互（数据库  静态文件处理）
要求 ： 健壮性，安全性
       并发性能和处理速度
	   架构合理便于维护扩展

网站后端

httpserver  +  WebFrame

第三版 
   功能 ： 
     httpserver：
       获取http请求 
       解析http请求
       将请求发送给WebFrame
       从WebFrame接收反馈数据
       将数据组织为Response格式发送给客户端

     WebFrame：
       从httpserver接收具体请求
       根据请求进行逻辑处理和数据处理
          * 静态页面
	      * 逻辑数据
          将需要的数据反馈给httpserver

     升级点 ： 1. 采用httpserver和应用处理分离的模式
              2. 降低了耦合度
	          3. 原则上httpserver可以搭配任意的   webFrame

项目结构：  
           |--httpserver --HttpServer.py (主程序)
           |              --settings (httpserver配置) |
  project--|
           |
           |
           |--WebFrame   --static （存放静态网页）
	                     --views.py （ 应用处理程序）
                         --urls.py （存放路由）
			             --settings （框架配置）
			             --WebFrame.py (主程序代码)

python 自带httpserver

from http.sever import BaseHTTPRquestHandler,HTTPServer




回顾：
http协议 ： 超文本传输协议，是一个应用层协议

用途 ： 网页数据的传输
        数据传输方法
图片解释：http.png
特点 ：
1. 应用层协议，传输层使用tcp服务
2. 简单，灵活，多种语言都有http相关操作接口
3. 无状态的协议，即不记录用户传输的信息
4. http1.1  支持持久连接

一端通过http请求的格式发送具体请求内容，另一端接收http请求，按照协议格式解析。获取真实请求后按照http协议响应格式组织回复内容，回发给请求方，完成一次数据交互。

http请求 （request）
html格式：<h1>welcome to tedu</h1>
请求格式：

1)请求行  ： 具体的请求类别和请求内容
    格式：  GET       /         HTTP/1.1
          请求类别  请求内容    协议版本
    请求类别 ： 表示请求的种类
        GET      获取网络资源
	    POST     提交一定的附加信息，得到返回结果
	    HEAD     获取响应头
	    PUT      更新服务器资源
	    DELETE   删除服务器资源
        CONNECT
	    TRACE    用于测试
	    OPTIONS  获取服务器性能信息

2)请求头 ： 对请求内容的具体描述信息
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: max-age=0
Connection: keep-alive

3)空行
4)请求体 ： 请求参数或者是提交内容


http响应 （response）

响应格式

1)响应行  ： 反馈响应的情况
    格式 ： HTTP/1.1    200     OK
            协议版本   响应码  附加信息
    响应码 ： 响应的具体情况
              1xx ： 提示信息，表示请求成功
	      2xx ： 响应成功
	      3xx ： 响应需要重定向
	      4xx ： 客户端错误
	      5xx ： 服务端错误
    常见响应码 ： 200  成功
                  404  请求内容不存在
		  401  没有访问权限
		  500  服务器发生未知错误
		  503  暂时无法执行

2)响应头 ： 对响应内容的具体描述
Connection: keep-alive
Content-Encoding: gzip
Content-Type: text/html
Date: Thu, 06 Sep 2018 09:11:18 GMT

3)空行
4)响应体 ： 返回给请求端的具体内容



HTTPServer  V2.0

1. 接收客户端请求
2. 解析客户端请求
3. 组织数据，形成HTTP response
4. 将数据发送给客户端

升级
1. 采用多线程并发接收多个客户端请求
2. 基本的请求解析，根据请求返回相应的内容
3. 除了可以请求静态网页，也可以请求简单的数据
4. 将功能封装在一个类中

技术点 ：
1. socket  tcp 套接字
2. http协议的请求响应格式
3. 线程并发的创建方法
4. 类的基本使用